{
  "address": "0x71C95911E9a5D330f4D621842EC243EE1343292e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3268cd4f38ef405a039fc72e721f105f4125cd217df63b851d7b38d788eeb67d",
  "receipt": {
    "to": null,
    "from": "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
    "contractAddress": "0x71C95911E9a5D330f4D621842EC243EE1343292e",
    "transactionIndex": 0,
    "gasUsed": "1022788",
    "logsBloom": "0x
    "blockHash": "0x583fa8645a6d8564015e2428b2b251a27cfe6e2d3016974eeb820b94e1d44ba9",
    "transactionHash": "0x3268cd4f38ef405a039fc72e721f105f4125cd217df63b851d7b38d788eeb67d",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1022788",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8464135c8F25Da09e49BC8782676a84730C318bC"
  ],
  "numDeployments": 1,
  "solcInputHash": "da2fd05723d2691b445dd5285369b903",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This implements price feeds as our authors\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"//Get funds from the users\\n//Withdraw funds\\n//Set a minimum funding value in USD\\n\\n/* Solidity Code Style Guide\\nOrder of layout: Pragama -> Import -> Interfaces -> Libraries -> Contracts\\nContracts layout: Type declaration -> State variables -> events -> modifiers -> funcitons\\nNatSpec: Doxygen- /** @title,@author,@notice etc for automated documentations */\\n\\n//SPDX-License-Identifier: MIT\\n//Pragma\\npragma solidity ^0.8.8;\\n\\n//Imports\\nimport \\\"./PriceConverter.sol\\\";\\n\\n//Error Codes\\nerror FundMe__NotOwner();\\n\\n//Interfaces, Libraries\\n\\n//Contracts\\n//constant immutable can reduce the gas\\n/** @title A contract for crowd funding\\n *  @notice demo a sample funding contract\\n *  @dev This implements price feeds as our authors\\n */\\ncontract FundMe {\\n    //getConversionRate(msg.value) === msg.value.getConversionRate()\\n    //type declerations\\n    using PriceConverter for uint256;\\n\\n    //assign compile time use constant keyword\\n    //State variables\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n\\n    address[] public s_funders;\\n    mapping(address => uint256) public s_addressToAmountFunded;\\n\\n    //if variable gets sets one time use gas efficient method\\n    address public immutable i_owner;\\n\\n    //Get price Feed address on different chain\\n    AggregatorV3Interface public s_priceFeed;\\n\\n    //runs right after contract gets deployed\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // What happens if someone sends this contract ETH without using fund function\\n    // receive()\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    //get funds function\\n    //transaction has fields: Nonce, gasprice, gas limit, to, value, data, (v,r,s)\\n    //value transfer - gaslimit: 21000, to - address, data-empty\\n    //funciton call - to: address, data\\n    //payable - contracts address can hold funds\\n    function fund() public payable {\\n        //undo anything thats get reverted and give back remaining gas\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"Didn't send enough\\\"\\n        ); //1e18 == 1*10^18\\n        //msg.sender address of caller, msg.value -\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n    }\\n\\n    //can put modifier at the end of the function\\n    function withdraw() public onlyOwner {\\n        //for loop and reset array\\n        for (\\n            uint256 fundersIndex = 0;\\n            fundersIndex < s_funders.length;\\n            fundersIndex++\\n        ) {\\n            address funder = s_funders[fundersIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        //reset the array\\n        s_funders = new address[](0);\\n\\n        //withdraw the funds (3 ways): transfer send call\\n        //1.transfer - cast address to payable address (automatically revert)\\n        //payable(msg.sender).transfer(address(this).balance);\\n\\n        //2.send - don't revert needs to check with require\\n        //bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        //require(sendSuccess, \\\"Send failed\\\");\\n\\n        //3.call - can use without an abi (returns 2 value)\\n        (\\n            bool callSuccess, /*bytes memory dataReturned*/\\n\\n        ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    //modifier runs before or after the function\\n    modifier onlyOwner() {\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        } //gas-effcient\\n        //require(msg.sender == i_owner, \\\"Sender is not owner\\\");\\n        //do the rest of the code\\n        _;\\n    }\\n\\n    //cheaper withdraw, because we copy array in function and use and store them later\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        for (\\n            uint256 fundersIndex = 0;\\n            fundersIndex < funders.length;\\n            fundersIndex++\\n        ) {\\n            address funder = funders[fundersIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n}\\n\",\"keccak256\":\"0x62ab2d48041cd8a3e59e00ec4747a859bdad3ae82991252671909b622e3375f5\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n//can import directly from by using npm\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n//library can't have state variables\\n//all functions will be internal\\nlibrary PriceConverter {\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // ABI of Contract & Address = 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\n        //get ABI using interfaces\\n        (\\n            ,\\n            /*uint80 roundID*/\\n            int256 price, /*uint startedAt*/ /*uint timeStamp*/ /*uint80 answeredInRound*/\\n            ,\\n            ,\\n\\n        ) = priceFeed.latestRoundData();\\n        return uint256(price * 1e10); //can typecast int and uint\\n    }\\n\\n    // //interface + address can create ABI so we can use functions from other contracts\\n    // function getVersion() internal view returns (uint256) {\\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n    //         0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\n    //     );\\n    //     return priceFeed.version();\\n    // }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethAmount * ethPrice) / 1e18; //multiply first\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x9ab04639d02edddd6d1592119a43c7f1f4a2990626d2cdf005b424dd2ce10bb0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012a9380380620012a9833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6111236200018660003960008181610339015281816105c5015281816107bb015261085301526111236000f3fe60806040526004361061007f5760003560e01c80636b69a5921161004e5780636b69a59214610154578063b60d42881461017f578063be2693f014610189578063dba6335f146101935761008e565b80630ec3b027146100985780631bf6132d146100c35780633ccfd60b1461010057806354861af7146101175761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100ad6102f9565b6040516100ba9190610a77565b60405180910390f35b3480156100cf57600080fd5b506100ea60048036038101906100e59190610ad5565b61031f565b6040516100f79190610b1b565b60405180910390f35b34801561010c57600080fd5b50610115610337565b005b34801561012357600080fd5b5061013e60048036038101906101399190610b62565b610577565b60405161014b9190610b9e565b60405180910390f35b34801561016057600080fd5b506101696105b6565b6040516101769190610b1b565b60405180910390f35b6101876101be565b005b6101916105c3565b005b34801561019f57600080fd5b506101a8610851565b6040516101b59190610b9e565b60405180910390f35b6802b5e3af16b18800006101fd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461087590919063ffffffff16565b101561023e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023590610c16565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102f09190610c65565b92505081905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103bc576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104675760008082815481106103e1576103e0610cbb565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061045f90610cea565b9150506103bf565b50600067ffffffffffffffff81111561048357610482610d33565b5b6040519080825280602002602001820160405280156104b15781602001602082028036833780820191505090505b50600090805190602001906104c7929190610951565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104ee90610d93565b60006040518083038185875af1925050503d806000811461052b576040519150601f19603f3d011682016040523d82523d6000602084013e610530565b606091505b5050905080610574576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056b90610df4565b60405180910390fd5b50565b6000818154811061058757600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610648576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106cb57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610681575b5050505050905060005b81518110156107565760008282815181106106f3576106f2610cbb565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061074e90610cea565b9150506106d5565b50600067ffffffffffffffff81111561077257610771610d33565b5b6040519080825280602002602001820160405280156107a05781602001602082028036833780820191505090505b50600090805190602001906107b6929190610951565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107fd90610d93565b60006040518083038185875af1925050503d806000811461083a576040519150601f19603f3d011682016040523d82523d6000602084013e61083f565b606091505b505090508061084d57600080fd5b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080610881836108b1565b90506000670de0b6b3a7640000828661089a9190610e14565b6108a49190610e9d565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156108fa57600080fd5b505afa15801561090e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109329190610f5b565b5050509150506402540be400816109499190610fd6565b915050919050565b8280548282559060005260206000209081019282156109ca579160200282015b828111156109c95782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610971565b5b5090506109d791906109db565b5090565b5b808211156109f45760008160009055506001016109dc565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610a3d610a38610a33846109f8565b610a18565b6109f8565b9050919050565b6000610a4f82610a22565b9050919050565b6000610a6182610a44565b9050919050565b610a7181610a56565b82525050565b6000602082019050610a8c6000830184610a68565b92915050565b600080fd5b6000610aa2826109f8565b9050919050565b610ab281610a97565b8114610abd57600080fd5b50565b600081359050610acf81610aa9565b92915050565b600060208284031215610aeb57610aea610a92565b5b6000610af984828501610ac0565b91505092915050565b6000819050919050565b610b1581610b02565b82525050565b6000602082019050610b306000830184610b0c565b92915050565b610b3f81610b02565b8114610b4a57600080fd5b50565b600081359050610b5c81610b36565b92915050565b600060208284031215610b7857610b77610a92565b5b6000610b8684828501610b4d565b91505092915050565b610b9881610a97565b82525050565b6000602082019050610bb36000830184610b8f565b92915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b6000610c00601283610bb9565b9150610c0b82610bca565b602082019050919050565b60006020820190508181036000830152610c2f81610bf3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c7082610b02565b9150610c7b83610b02565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cb057610caf610c36565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610cf582610b02565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d2857610d27610c36565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d7d600083610d62565b9150610d8882610d6d565b600082019050919050565b6000610d9e82610d70565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610dde600b83610bb9565b9150610de982610da8565b602082019050919050565b60006020820190508181036000830152610e0d81610dd1565b9050919050565b6000610e1f82610b02565b9150610e2a83610b02565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e6357610e62610c36565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ea882610b02565b9150610eb383610b02565b925082610ec357610ec2610e6e565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610eed81610ece565b8114610ef857600080fd5b50565b600081519050610f0a81610ee4565b92915050565b6000819050919050565b610f2381610f10565b8114610f2e57600080fd5b50565b600081519050610f4081610f1a565b92915050565b600081519050610f5581610b36565b92915050565b600080600080600060a08688031215610f7757610f76610a92565b5b6000610f8588828901610efb565b9550506020610f9688828901610f31565b9450506040610fa788828901610f46565b9350506060610fb888828901610f46565b9250506080610fc988828901610efb565b9150509295509295909350565b6000610fe182610f10565b9150610fec83610f10565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561102b5761102a610c36565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561106857611067610c36565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110a5576110a4610c36565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110e2576110e1610c36565b5b82820290509291505056fea26469706673582212204e22f1aa2383d3240023c0f927c5180224f1fb6db6b48e4a4a44889b611192e864736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80636b69a5921161004e5780636b69a59214610154578063b60d42881461017f578063be2693f014610189578063dba6335f146101935761008e565b80630ec3b027146100985780631bf6132d146100c35780633ccfd60b1461010057806354861af7146101175761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100ad6102f9565b6040516100ba9190610a77565b60405180910390f35b3480156100cf57600080fd5b506100ea60048036038101906100e59190610ad5565b61031f565b6040516100f79190610b1b565b60405180910390f35b34801561010c57600080fd5b50610115610337565b005b34801561012357600080fd5b5061013e60048036038101906101399190610b62565b610577565b60405161014b9190610b9e565b60405180910390f35b34801561016057600080fd5b506101696105b6565b6040516101769190610b1b565b60405180910390f35b6101876101be565b005b6101916105c3565b005b34801561019f57600080fd5b506101a8610851565b6040516101b59190610b9e565b60405180910390f35b6802b5e3af16b18800006101fd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461087590919063ffffffff16565b101561023e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023590610c16565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102f09190610c65565b92505081905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103bc576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104675760008082815481106103e1576103e0610cbb565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061045f90610cea565b9150506103bf565b50600067ffffffffffffffff81111561048357610482610d33565b5b6040519080825280602002602001820160405280156104b15781602001602082028036833780820191505090505b50600090805190602001906104c7929190610951565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104ee90610d93565b60006040518083038185875af1925050503d806000811461052b576040519150601f19603f3d011682016040523d82523d6000602084013e610530565b606091505b5050905080610574576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056b90610df4565b60405180910390fd5b50565b6000818154811061058757600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610648576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106cb57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610681575b5050505050905060005b81518110156107565760008282815181106106f3576106f2610cbb565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061074e90610cea565b9150506106d5565b50600067ffffffffffffffff81111561077257610771610d33565b5b6040519080825280602002602001820160405280156107a05781602001602082028036833780820191505090505b50600090805190602001906107b6929190610951565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107fd90610d93565b60006040518083038185875af1925050503d806000811461083a576040519150601f19603f3d011682016040523d82523d6000602084013e61083f565b606091505b505090508061084d57600080fd5b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080610881836108b1565b90506000670de0b6b3a7640000828661089a9190610e14565b6108a49190610e9d565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156108fa57600080fd5b505afa15801561090e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109329190610f5b565b5050509150506402540be400816109499190610fd6565b915050919050565b8280548282559060005260206000209081019282156109ca579160200282015b828111156109c95782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610971565b5b5090506109d791906109db565b5090565b5b808211156109f45760008160009055506001016109dc565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610a3d610a38610a33846109f8565b610a18565b6109f8565b9050919050565b6000610a4f82610a22565b9050919050565b6000610a6182610a44565b9050919050565b610a7181610a56565b82525050565b6000602082019050610a8c6000830184610a68565b92915050565b600080fd5b6000610aa2826109f8565b9050919050565b610ab281610a97565b8114610abd57600080fd5b50565b600081359050610acf81610aa9565b92915050565b600060208284031215610aeb57610aea610a92565b5b6000610af984828501610ac0565b91505092915050565b6000819050919050565b610b1581610b02565b82525050565b6000602082019050610b306000830184610b0c565b92915050565b610b3f81610b02565b8114610b4a57600080fd5b50565b600081359050610b5c81610b36565b92915050565b600060208284031215610b7857610b77610a92565b5b6000610b8684828501610b4d565b91505092915050565b610b9881610a97565b82525050565b6000602082019050610bb36000830184610b8f565b92915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b6000610c00601283610bb9565b9150610c0b82610bca565b602082019050919050565b60006020820190508181036000830152610c2f81610bf3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c7082610b02565b9150610c7b83610b02565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cb057610caf610c36565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610cf582610b02565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d2857610d27610c36565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d7d600083610d62565b9150610d8882610d6d565b600082019050919050565b6000610d9e82610d70565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610dde600b83610bb9565b9150610de982610da8565b602082019050919050565b60006020820190508181036000830152610e0d81610dd1565b9050919050565b6000610e1f82610b02565b9150610e2a83610b02565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e6357610e62610c36565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ea882610b02565b9150610eb383610b02565b925082610ec357610ec2610e6e565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610eed81610ece565b8114610ef857600080fd5b50565b600081519050610f0a81610ee4565b92915050565b6000819050919050565b610f2381610f10565b8114610f2e57600080fd5b50565b600081519050610f4081610f1a565b92915050565b600081519050610f5581610b36565b92915050565b600080600080600060a08688031215610f7757610f76610a92565b5b6000610f8588828901610efb565b9550506020610f9688828901610f31565b9450506040610fa788828901610f46565b9350506060610fb888828901610f46565b9250506080610fc988828901610efb565b9150509295509295909350565b6000610fe182610f10565b9150610fec83610f10565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561102b5761102a610c36565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561106857611067610c36565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110a5576110a4610c36565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110e2576110e1610c36565b5b82820290509291505056fea26469706673582212204e22f1aa2383d3240023c0f927c5180224f1fb6db6b48e4a4a44889b611192e864736f6c63430008080033",
  "devdoc": {
    "details": "This implements price feeds as our authors",
    "kind": "dev",
    "methods": {},
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 66,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}